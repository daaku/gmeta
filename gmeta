#!/usr/bin/env python
# coding: utf-8
#
# Author: Naitik Shah <n@daaku.org>
#
"""gmeta is designed for use with git's pre-commit and post-checkout hooks to
allow managing the metadata of files in addition to their content.

It uses a sqlite database to store the metadata.

The included fields are:
 - mtime
 - atime
 - mode"""

__version__ = "0.1.0"

import logging as log
import os
import sqlite3
import stat
import sys
from collections import namedtuple
from commands import getstatusoutput
from optparse import OptionParser
from stat import ST_MODE, ST_MTIME, ST_ATIME


DB_FILE=".gmeta"

""" A File object containing the metadata """
File = namedtuple("File", "name, imode, mtime, atime")

class Store(object):
    """
    The Store is a collection of the Files and their metadata.

    """

    def __init__(self):
        self.cache = {}
        self.initdb()

    def initdb(self):
        """
        Initialize the database and create the schema if necessary.

        """

        self.db = sqlite3.connect(DB_FILE)
        try:
            exists_sql = """
                SELECT * FROM files LIMIT 1
            """
            self.db.execute(exists_sql)
            log.debug('Using existing "files" table.')
        except sqlite3.OperationalError, e:
            create_sql = """
                CREATE TABLE files (
                    name  TEXT,
                    imode INTEGER,
                    mtime INTEGER,
                    atime INTEGER
                )
            """
            self.db.execute(create_sql)
            self.db.commit()
            log.debug('Created new "files" table.')
        self.cursor = self.db.cursor()

    def commit(self):
        """
        Commit the changes.

        """

        log.debug("Commiting.")
        self.db.commit()

    def __del__(self):
        """
        The changes to a Store are commited automatically when the Store is
        normally destroyed.

        """

        self.commit()

    def __len__(self):
        """
        Count the number of Files in this Store.

        """

        count_sql = """
            SELECT COUNT(*) FROM files
        """
        cursor = self.cursor
        cursor.execute(count_sql)
        return cursor.fetchone()[0]

    def __getitem__(self, name):
        """
        Look up a File by its name.

        """

        try:
            return self.cache[name]
        except KeyError:
            select_sql = """
                SELECT * FROM files WHERE name = ?
            """
            cursor = self.cursor
            cursor.execute(select_sql, (name,))
            data = cursor.fetchone()
            if data is None:
                raise KeyError
            else:
                file = File(*data)
                self.cache[name] = file
                return file

    def __setitem__(self, name, file):
        """
        Add or update an existing File by name.

        """

        if name in self:
            cached = self[name]
            # do an update only if something has changed
            if (cached.imode == file.imode and
                cached.mtime == file.mtime and
                cached.atime == file.atime):
                log.debug('Nothing changed for "%s" - skipping update.' % name)
            else:
                update_sql = """
                    UPDATE files SET
                    imode = ?,
                    mtime = ?,
                    atime = ?
                    WHERE name = ?
                """
                data = (file.imode, file.mtime, file.atime, file.name)
                self.cursor.execute(update_sql, data)
                self.cache[name] = file
                log.debug('Updated existing row for "%s".' % name)
        else:
            insert_sql = """
                INSERT INTO files VALUES
                (?, ?, ?, ?)
            """
            self.cursor.execute(insert_sql, file)
            self.cache[name] = file
            log.debug('Inserted new row for "%s".' % name)

    def __delitem__(self, name):
        """
        Delete an existing File by name. It is not an error if a File with the
        given name is not found.

        """

        delete_sql = """
            DELETE FROM files WHERE name = ?
        """
        self.cursor.execute(delete_sql, (name,))
        try:
            del self.cache[name]
        except KeyError:
            pass

    def __contains__(self, name):
        """
        Check if a File with the given name exists.

        """

        try:
            self[name] # will raise an error if not found
            return True
        except KeyError:
            return False

    def __iter__(self):
        """
        Iterate over all the Files in this Store.

        """

        select_names = """
            SELECT * FROM files
        """
        cursor = self.cursor
        cursor.execute(select_names)
        for file in map(File._make, cursor.fetchall()):
            self.cache[file.name] = file
            yield file

def run(command, success='', failure='', fatal=False):
    """
    getstatusoutput wrapper.

    """

    (status, output) = getstatusoutput(command)
    if status == 0:
        if success != '':
            log.info(success)
        else:
            log.debug('Command "' + command + '" completed successfully.')
    else:
        if failure == '':
            failure = 'Command "' + command + '" failed with exit code "' + str(status) + '".'

        if fatal:
            log.critical(failure)
            log.debug('Output:\n' + output)
            exit(1)
        elif failure:
            log.warn(failure)
    log.debug('Output:\n' + output)
    return (status, output)

def pre_commit_files():
    """
    Iterator for the list of files that will be affected by the current commit.

    """

    (status, output) = run("git-rev-parse --verify HEAD", failure=None)
    if status == 0:
        against="HEAD"
    else:
        # Initial commit: diff against an empty tree object
        against="4b825dc642cb6eb9a060e54bf8d69288fbee4904"
    (status, output) = run("git diff-index " + against, fatal=True)
    for line in output.split("\n"):
        yield line[99:].strip()

def all_files():
    """
    Iterator for the list of files according to "git ls-files".

    """

    (status, output) = run("git ls-files", fatal=True)
    for name in output.split("\n"):
        yield name

def post_checkout_files(old_head, new_head, branch):
    """
    Returns an iterator for the list of files that differ between old and new
    references.

    """

    def _g():
        (status, output) = run("git diff --name-only " + old_head + " " + new_head, fatal=True)
        for name in output.split("\n"):
            yield name
    return _g

def add_files(store, files_iter):
    """
    Add metadata of given files.

    """

    for name in files_iter():
        stat = os.stat(name)
        store[name] = File(
            name,
            stat[ST_MODE],
            stat[ST_MTIME],
            stat[ST_ATIME],
        )
    store.commit()
    run("git add " + DB_FILE, fatal=True)

def restore_files(store, files_iter):
    """
    Restore metadata of given files.

    """

    for name in files_iter():
        file = store[name]
        os.utime(file.name, (file.atime, file.mtime))
        os.chmod(file.name, file.imode)

def init_hooks():
    if not os.path.exists(".git/hooks/"):
        log.critical('Could not find the ".git/hooks/" directory.\n'
                'Make sure you are in a top level git repository.')
        exit(1)

    realpath = os.path.realpath
    gmeta = realpath(sys.argv[0])
    for hook in ["pre-commit", "post-checkout"]:
        expected = ".git/hooks/" + hook
        if os.path.exists(expected):
            if realpath(expected) != gmeta:
                log.error("Hook file " + expected + " already exists.")
        else:
            os.symlink(gmeta, expected)

def main():
    """
    The entry point for the script.

    """

    usage = """usage: %%prog [OPTION] COMMAND

%s

Commands:
  init          update entries for files according to "git ls-files"
  restore       restores the metadata for files according to "git ls-files"
  pre-commit    runs the pre-commit hook
  post-checkout runs the post-checkout hook""" % __doc__
    parser = OptionParser(usage=usage, version="%prog-" + __version__)
    parser.add_option(
        "-l", "--logger",
        action="store_true",
        dest="logger",
        #default=True,
        default=False,
        help="enable the verbose logger"
    )

    (options, args) = parser.parse_args()

    # symlinked hook name is used to figure out what to do
    basename = os.path.basename(sys.argv[0])
    if basename == "pre-commit" or basename == "post-checkout":
        command = basename
    else:
        if len(args) == 0:
            parser.error("incorrect number of arguments")
        else:
            command = args[0]

    if options.logger:
        # colorized logger
        DEF_COLOR="[0m"
        BLUE="[34;01m"
        CYAN="[36;01m"
        GREEN="[32;01m"
        RED="[31;01m"
        GRAY="[37;01m"
        YELLOW="[33;01m"

        log.addLevelName(log.DEBUG,    CYAN   + ">> DEBUG")
        log.addLevelName(log.INFO,     GREEN  + ">> INFO")
        log.addLevelName(log.WARNING,  YELLOW + ">> WARNING")
        log.addLevelName(log.ERROR,    RED    + ">> ERROR")
        log.addLevelName(log.CRITICAL, RED    + ">> CRITICAL")
        log.basicConfig(level=log.DEBUG, format=" %(levelname)-19s" + DEF_COLOR + " %(message)s")

    store = Store()
    if command == "init":
        init_hooks()
        add_files(store, all_files)
    elif command == "pre-commit":
        add_files(store, pre_commit_files)
    elif command == "restore":
        restore_files(store, all_files)
    elif command == "post-checkout":
        restore_files(store, post_checkout_files(*args))
    else:
        print 'unknown command: "%s"' % command
        exit(1)

if __name__ == "__main__":
    main()
